[{"/home/urja/frontier-techworks-test/src/index.tsx":"1","/home/urja/frontier-techworks-test/src/reportWebVitals.ts":"2","/home/urja/frontier-techworks-test/src/App.tsx":"3","/home/urja/frontier-techworks-test/src/components/EnterButton.tsx":"4","/home/urja/frontier-techworks-test/src/components/AnswerOption.tsx":"5","/home/urja/frontier-techworks-test/src/utility/utilityFunctions.tsx":"6","/home/urja/frontier-techworks-test/src/components/Response.tsx":"7","/home/urja/frontier-techworks-test/src/components/Difficulty.tsx":"8"},{"size":584,"mtime":1608471068893,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1608290371700,"results":"11","hashOfConfig":"10"},{"size":3013,"mtime":1608470904040,"results":"12","hashOfConfig":"10"},{"size":2602,"mtime":1608462357308,"results":"13","hashOfConfig":"10"},{"size":7501,"mtime":1608470874942,"results":"14","hashOfConfig":"10"},{"size":1593,"mtime":1608470763357,"results":"15","hashOfConfig":"10"},{"size":674,"mtime":1608470843355,"results":"16","hashOfConfig":"10"},{"size":798,"mtime":1608470887899,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11sans9",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},"/home/urja/frontier-techworks-test/src/index.tsx",[],"/home/urja/frontier-techworks-test/src/reportWebVitals.ts",[],["41","42"],"/home/urja/frontier-techworks-test/src/App.tsx",["43"],"import React, { useState } from 'react';\nimport './App.css';\nimport questions from './utility/questions.json';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport AnswerOption from './components/AnswerOption';\nimport * as functions from './utility/utilityFunctions';\nimport Difficulty from './components/Difficulty';\n\ninterface AppProps {\n  noOfQuestions : number\n}\n\nconst App : React.FunctionComponent<AppProps> = (props: AppProps) => {\n  const [currentQuestion, setCurrentQuestion] = useState(1);\n  const [noOfCorrectResponses, setNoOfCorrectResponses] = useState(0);\n  const [noOfWrongResponses, setNoOfWrongResponses] = useState(0);\n\n  return (\n    <div className = 'App'>\n      <div className = 'Progress-bar' style = {{width: functions.printProgress(currentQuestion,props.noOfQuestions) + '%' }} />\n      <div className = 'Quiz'>\n        <div className = 'Header'>\n          <div className = 'Number'>\n            Question {currentQuestion} of {props.noOfQuestions}\n          </div>\n          <div className = 'Category'>\n            {decodeURIComponent(questions[currentQuestion - 1].category)}\n          </div>\n          <div className = 'Difficulty'>\n            <Difficulty currentQuestion = {currentQuestion} />\n          </div>\n        </div>\n        <div className = 'Question'>\n          {decodeURIComponent(questions[currentQuestion - 1].question)}\n        </div>\n        <div className = 'Response'>\n          <AnswerOption currentQuestion = {currentQuestion} setCurrentQuestion = {setCurrentQuestion} setNoOfCorrectResponses = {setNoOfCorrectResponses} score = {functions.printScore(noOfCorrectResponses,noOfWrongResponses)} noOfQuestions = {props.noOfQuestions} noOfCorrectResponses = {noOfCorrectResponses} noOfWrongResponses = {noOfWrongResponses} setNoOfWrongResponses = {setNoOfWrongResponses} />\n        </div>\n      </div>\n      <div className = 'Score-bar'>\n        <div className = 'Score'>\n          Score: {functions.printScore(noOfCorrectResponses,noOfWrongResponses)}%\n        </div>\n        <div className = 'Max-score'>\n          Max Score: {functions.printMaxScore(noOfWrongResponses,props.noOfQuestions)}%\n        </div>\n        <div className = 'Bar'>\n          <div className = 'Progress' style = {{backgroundColor: 'red', width: functions.printMinScore(noOfCorrectResponses,props.noOfQuestions) + '%',\n            zIndex: (functions.printMinScore(noOfCorrectResponses,props.noOfQuestions) == functions.printScore(noOfCorrectResponses,noOfWrongResponses)) ? 3:5 }} />\n          <div className = 'Progress' style = {{backgroundColor: 'green', width: functions.printScore(noOfCorrectResponses,noOfWrongResponses) + '%', zIndex: 4 }} />\n          <div className = 'Progress' style = {{backgroundColor: 'blue', width: functions.printMaxScore(noOfWrongResponses,props.noOfQuestions) + '%', zIndex: 2 }} />\n          <div className = 'Progress' style = {{backgroundColor: 'white', width: 100 + '%', zIndex: 1 }} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","/home/urja/frontier-techworks-test/src/components/EnterButton.tsx",["44"],"import React, {useState} from 'react';\nimport { Button, Modal } from 'react-bootstrap';\nimport '../App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\ninterface EnterButtonProps {\n    currentQuestion: number;\n    setCurrentQuestion: (currentQuestion: number) => void;\n    setNoOfCorrectResponses: (noOfCorrectResponses: number) => void;\n    setNoOfWrongResponses: (noOfWrongResponses: number) => void;\n    noOfWrongResponses: number;\n    score: number;\n    noOfQuestions: number;\n    visible: boolean;\n}\n\nconst EnterButton : React.FunctionComponent<EnterButtonProps> = (props: EnterButtonProps) => {\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    const updateQuestion = () => {\n        props.setCurrentQuestion(props.currentQuestion + 1);\n    }\n    const handleRetakeQuiz = () => {\n        props.setCurrentQuestion(1);\n        props.setNoOfCorrectResponses(0);\n        props.setNoOfWrongResponses(0);\n        setShow(false);\n    }\n    if(props.visible) {\n        if(props.currentQuestion == props.noOfQuestions) {\n            return (\n                <>\n                    <Button className = 'End-button' variant=\"primary\" onClick={handleShow}>\n                        End Test\n                    </Button>\n                    <Modal className = 'Result-modal' show={show} onHide={handleClose}>\n                        <Modal.Header className = 'Result-header' closeButton>\n                            <Modal.Title className = 'Result-title'>Score</Modal.Title>\n                         </Modal.Header>\n                        <Modal.Body className = 'Result-body'>{props.score}</Modal.Body>\n                        <Modal.Footer className = 'Result-footer'>\n                            <Button className = 'Close-button' variant=\"secondary\" onClick={handleClose}>\n                                Close\n                            </Button>\n                            <Button className = 'Retake-button' variant=\"primary\" onClick={handleRetakeQuiz}>\n                                Retake\n                            </Button>\n                        </Modal.Footer>\n                    </Modal>\n                </>\n            )\n        }\n    \n        else {\n            return (\n                <>\n                    <Button className = 'Next-button' variant=\"primary\" onClick={updateQuestion}>\n                        Next\n                    </Button>\n                </>\n            )\n        }\n    }\n    else {\n        return (\n            <> </>\n        )\n    }\n}\n\nexport default EnterButton;","/home/urja/frontier-techworks-test/src/components/AnswerOption.tsx",["45","46","47","48"],"import React, {useEffect, useState, useRef} from 'react';\nimport { Col, Row, Button } from 'react-bootstrap';\nimport questions from '../utility/questions.json';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as functions from '../utility/utilityFunctions';\nimport Response from './Response';\nimport '../App.css';\nimport EnterButton from './EnterButton';\n\ninterface AnswerOptionProps {\n    currentQuestion : number;\n    setCurrentQuestion: (currentQuestion: number) => void;\n    setNoOfCorrectResponses: (noOfCorrectResponses: number) => void;\n    setNoOfWrongResponses: (noOfWrongResponses: number) => void;\n    score: number;\n    noOfQuestions: number;\n    noOfCorrectResponses: number;\n    noOfWrongResponses: number;\n}\n\nconst AnswerOption : React.FunctionComponent<AnswerOptionProps> = (props: AnswerOptionProps) => {\n    const answerType : string = questions[props.currentQuestion - 1].type;\n    const [answerSelected, answerChosen] = useState(false);\n    const [response, responseCaptured] = useState(false);\n    const [isButtonDisabled, disableButton] = useState(false);\n\n    \n    const [options, changeOptions] = useState<string[]>([]);\n    const checkAnswer: (optionChoosen: string) => void = (optionChoosen: string) => {\n        console.log(options);\n        if(!response) {\n            disableButton(true);\n            if(functions.isCorrect(optionChoosen,questions[props.currentQuestion - 1].correct_answer)) {\n                console.log(\"answer true\");\n                answerChosen(true);\n                props.setNoOfCorrectResponses(props.noOfCorrectResponses + 1);\n            }\n            else {\n                console.log(\"answer false\");\n                answerChosen(false);\n                props.setNoOfWrongResponses(props.noOfWrongResponses + 1);\n            }\n            responseCaptured(true);\n        }\n    }\n\n    useEffect(() => {\n        let stringOptions : string[] = Object.assign([], questions[props.currentQuestion - 1].incorrect_answers);\n        stringOptions.push(questions[props.currentQuestion - 1].correct_answer);\n        changeOptions(functions.shuffleArray(stringOptions));\n        answerChosen(false);\n        responseCaptured(false);\n        disableButton(false);\n    }, [props.currentQuestion]);\n\n    switch (answerType) {\n        case 'multiple' : \n            return (\n                <div className = 'Multiple-choice'>\n                    <div>\n                        <Row className = 'Option-row'>\n                            <Col className = 'Options'>\n                                <Button className = 'OptionButton' variant=\"primary\" size=\"lg\" active = {!isButtonDisabled} disabled = {isButtonDisabled} onClick = {checkAnswer.bind(this,decodeURIComponent(options[0]))}>\n                                    {decodeURIComponent(options[0])}\n                                </Button>\n                            </Col>\n                            <Col className = 'Options'>\n                                <Button className = 'OptionButton' variant=\"primary\" size=\"lg\" active = {!isButtonDisabled} disabled = {isButtonDisabled} onClick = {checkAnswer.bind(this,decodeURIComponent(options[1]))}>\n                                    {decodeURIComponent(options[1])}\n                                </Button>\n                            </Col>\n                        </Row>\n                        <Row className = 'Option-row'>\n                            <Col className = 'Options'>\n                                <Button className = 'OptionButton' variant=\"primary\" size=\"lg\" active = {!isButtonDisabled} disabled = {isButtonDisabled} onClick = {checkAnswer.bind(this,decodeURIComponent(options[2]))}>\n                                    {decodeURIComponent(options[2])}\n                                </Button>\n                            </Col>\n                            <Col className = 'Options'>\n                                <Button className = 'OptionButton' variant=\"primary\" size=\"lg\" active = {!isButtonDisabled} disabled = {isButtonDisabled} onClick = {checkAnswer.bind(this,decodeURIComponent(options[3]))}>\n                                    {decodeURIComponent(options[3])}\n                                </Button>\n                            </Col>\n                        </Row>\n                    </div>\n                    <div className = 'Result'>\n                        <div className = 'Comment-div'>\n                            <Row className = 'Grade'>\n                                <Response visible = {response} response = {answerSelected} />\n                            </Row>\n                        </div>\n                        <div className = 'Button-div'>\n                            <Row className = 'Enter-button'>\n                                <EnterButton visible = {response} currentQuestion = {props.currentQuestion} setCurrentQuestion =  {props.setCurrentQuestion}  setNoOfCorrectResponses = {props.setNoOfCorrectResponses} \n                                    score = {props.score} noOfQuestions = {props.noOfQuestions} setNoOfWrongResponses = {props.setNoOfWrongResponses} noOfWrongResponses = {props.noOfWrongResponses} />\n                            </Row>\n                        </div>\n                    </div>\n                </div>\n            )\n        break;\n        case 'boolean' :\n            return (\n                <div className = 'Multiple-choice'>\n                    <div>\n                        <Row className = 'Option-row'>\n                            <Col className = 'Options'>\n                                <Button className = 'OptionButton' variant=\"primary\" size=\"lg\" active = {!isButtonDisabled} disabled = {isButtonDisabled} onClick = {checkAnswer.bind(this,decodeURIComponent(options[0]))}>\n                                    {decodeURIComponent(options[0])}\n                                </Button>\n                            </Col>\n                            <Col className = 'Options'>\n                                <Button className = 'OptionButton' variant=\"primary\" size=\"lg\" active = {!isButtonDisabled} disabled = {isButtonDisabled} onClick = {checkAnswer.bind(this,decodeURIComponent(options[1]))}>\n                                    {decodeURIComponent(options[1])}\n                                </Button>\n                            </Col>\n                        </Row>\n                    </div>\n                    <div className = 'Result'>\n                        <div className = 'Comment-div'>\n                            <Row className = 'Grade'>\n                                <Response visible = {response} response = {answerSelected} />\n                            </Row>\n                        </div>\n                        <div className = 'Button-div'>\n                            <Row className = 'Enter-button'>\n                                <EnterButton visible = {response} currentQuestion = {props.currentQuestion} setCurrentQuestion =  {props.setCurrentQuestion}  setNoOfCorrectResponses = {props.setNoOfCorrectResponses} \n                                    score = {props.score} noOfQuestions = {props.noOfQuestions} setNoOfWrongResponses = {props.setNoOfWrongResponses} noOfWrongResponses = {props.noOfWrongResponses} />\n                            </Row>\n                        </div>\n                    </div>\n                </div>\n            )\n        break;\n        default : \n            return (\n                <div />\n            )\n        break;\n    }\n}\n\nexport default AnswerOption;\n","/home/urja/frontier-techworks-test/src/utility/utilityFunctions.tsx",["49"],"import React from 'react';\n\nexport function shuffleArray(array: string[]) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    while (0 !== currentIndex) {\n  \n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n}\n\nexport function printProgress(currentQuestion: number, noOfQuestions: number) {\n    return (currentQuestion/noOfQuestions) * 100;\n}\n\nexport function printScore(noOfCorrectResponses: number, noOfWrongResponses: number) {\n    let score = 0;\n    if(noOfCorrectResponses | noOfWrongResponses) {\n        score = (noOfCorrectResponses/(noOfCorrectResponses + noOfWrongResponses)) * 100;\n    }\n    return score;\n}\n\nexport function printMaxScore(noOfWrongResponses: number, noOfQuestions: number) {\n    return ((noOfQuestions - noOfWrongResponses)/noOfQuestions) * 100;\n}\n\nexport function printMinScore(noOfCorrectResponses: number, noOfQuestions: number) {\n    return (noOfCorrectResponses/noOfQuestions) * 100;\n}\n\nexport function isCorrect(correctAnswer: string, optionChosen: string) {\n    console.log('type',typeof(correctAnswer));\n    if((typeof(correctAnswer)) == 'string') {\n        console.log(correctAnswer,\" \",decodeURIComponent(optionChosen),\" \",(correctAnswer===decodeURIComponent(optionChosen)));\n        if(correctAnswer === decodeURIComponent(optionChosen)) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}","/home/urja/frontier-techworks-test/src/components/Response.tsx",["50","51"],"import React, {useState} from 'react';\nimport '../App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\ninterface ResponseProps {\n    visible: boolean | null,\n    response: boolean | null\n}\n\nconst Response : React.FunctionComponent<ResponseProps> = (props: ResponseProps) => {\n    const [optionSelected, changeAnswer] = useState(false);\n    if(!props.visible) {\n        return (\n            <> </>\n        )\n    }\n    else if(props.response) {\n        return (\n            <div>\n                Correct!\n            </div>\n        )\n    }\n    else {\n        return (\n            <div>\n                Sorry!\n            </div>\n        )\n    }\n}\n\nexport default Response;","/home/urja/frontier-techworks-test/src/components/Difficulty.tsx",["52","53","54"],"import React from 'react';\nimport questions from '../utility/questions.json';\nimport '../App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\ninterface DifficultyProps {\n    currentQuestion: number;\n  }\n  \nconst Difficulty: React.FunctionComponent<DifficultyProps> = (props: DifficultyProps) => {\n    const difficulty: string = questions[props.currentQuestion - 1].difficulty;\n    let rating: number = 0;\n    if(difficulty == 'easy') {\n      rating = 1;\n    }\n    else if(difficulty == 'medium') {\n      rating = 2;\n    }\n    else if(difficulty == 'hard') {\n      rating = 3;\n    }\n    \n    const stars = [];\n  \n    while(rating--) {\n      stars.push(<span className = 'rating'>&#9734;</span>);\n    }\n  \n    return (\n      <div>\n        {stars}\n      </div>\n    )\n}\n\nexport default Difficulty;",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":49,"column":88,"nodeType":"61","messageId":"62","endLine":49,"endColumn":90},{"ruleId":"59","severity":1,"message":"60","line":31,"column":34,"nodeType":"61","messageId":"62","endLine":31,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":1,"column":37,"nodeType":"65","messageId":"66","endLine":1,"endColumn":43},{"ruleId":"67","severity":1,"message":"68","line":101,"column":9,"nodeType":"69","messageId":"70","endLine":101,"endColumn":15},{"ruleId":"67","severity":1,"message":"68","line":134,"column":9,"nodeType":"69","messageId":"70","endLine":134,"endColumn":15},{"ruleId":"67","severity":1,"message":"68","line":139,"column":9,"nodeType":"69","messageId":"70","endLine":139,"endColumn":15},{"ruleId":"63","severity":1,"message":"71","line":1,"column":8,"nodeType":"65","messageId":"66","endLine":1,"endColumn":13},{"ruleId":"63","severity":1,"message":"72","line":11,"column":12,"nodeType":"65","messageId":"66","endLine":11,"endColumn":26},{"ruleId":"63","severity":1,"message":"73","line":11,"column":28,"nodeType":"65","messageId":"66","endLine":11,"endColumn":40},{"ruleId":"59","severity":1,"message":"60","line":13,"column":19,"nodeType":"61","messageId":"62","endLine":13,"endColumn":21},{"ruleId":"59","severity":1,"message":"60","line":16,"column":24,"nodeType":"61","messageId":"62","endLine":16,"endColumn":26},{"ruleId":"59","severity":1,"message":"60","line":19,"column":24,"nodeType":"61","messageId":"62","endLine":19,"endColumn":26},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'React' is defined but never used.","'optionSelected' is assigned a value but never used.","'changeAnswer' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]