{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/urja/frontier-techworks-test/src/components/AnswerOption.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Col, Row, Button } from 'react-bootstrap';\nimport questions from '../questions.json';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as functions from '../utility/utilityFunctions';\nimport Response from './Response';\nimport '../App.css';\n\nconst AnswerOption = props => {\n  _s();\n\n  const answerType = questions[props.currentQuestion - 1].type;\n  const options = questions[props.currentQuestion - 1].incorrect_answers;\n  const [answerSelected, answerChosen] = useState(false);\n  const [response, responseCaptured] = useState(false); // let answerSelected: boolean | null = false;\n  // let response: boolean | null = false;\n\n  const checkAnswer = optionChoosen => {\n    // answerSelected = true;\n    if (optionChoosen == questions[props.currentQuestion - 1].correct_answer) {\n      console.log(\"answer true\");\n      answerChosen(true); // response = true;\n    } else {\n      console.log(\"answer false\");\n      answerChosen(false); // response = false;\n    }\n\n    responseCaptured(true);\n  };\n\n  options.push(questions[props.currentQuestion - 1].correct_answer);\n  functions.shuffleArray(options);\n\n  switch (answerType) {\n    case 'multiple':\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          className: \"Option-row\",\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            className: \"Options\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"primary\",\n              size: \"lg\",\n              active: true,\n              onClick: checkAnswer.bind(this, decodeURIComponent(options[0])),\n              children: decodeURIComponent(options[0])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"Options\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"primary\",\n              size: \"lg\",\n              active: true,\n              onClick: checkAnswer.bind(this, decodeURIComponent(options[1])),\n              children: decodeURIComponent(options[1])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          className: \"Option-row\",\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            className: \"Options\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"primary\",\n              size: \"lg\",\n              active: true,\n              onClick: checkAnswer.bind(this, decodeURIComponent(options[2])),\n              children: decodeURIComponent(options[2])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"Options\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"primary\",\n              size: \"lg\",\n              active: true,\n              onClick: checkAnswer.bind(this, decodeURIComponent(options[3])),\n              children: decodeURIComponent(options[3])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          className: \"Option-row\",\n          children: /*#__PURE__*/_jsxDEV(Response, {\n            visible: answerSelected,\n            response: response\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this);\n      break;\n\n    case 'boolean':\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          className: \"Option-row\",\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            className: \"Options\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"primary\",\n              size: \"lg\",\n              active: true,\n              onClick: checkAnswer.bind(this, decodeURIComponent(options[0])),\n              children: decodeURIComponent(options[0])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"Options\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"primary\",\n              size: \"lg\",\n              active: true,\n              onClick: checkAnswer.bind(this, decodeURIComponent(options[1])),\n              children: decodeURIComponent(options[1])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          className: \"Option-row\",\n          children: /*#__PURE__*/_jsxDEV(Response, {\n            visible: answerSelected,\n            response: response\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this);\n      break;\n\n    default:\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this);\n      break;\n  }\n};\n\n_s(AnswerOption, \"8j3ejEWTSqJiXOnyeiPnVuzpqv4=\");\n\n_c = AnswerOption;\nexport default AnswerOption;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnswerOption\");","map":{"version":3,"sources":["/home/urja/frontier-techworks-test/src/components/AnswerOption.tsx"],"names":["React","useState","Col","Row","Button","questions","functions","Response","AnswerOption","props","answerType","currentQuestion","type","options","incorrect_answers","answerSelected","answerChosen","response","responseCaptured","checkAnswer","optionChoosen","correct_answer","console","log","push","shuffleArray","bind","decodeURIComponent"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { Col, Row, Button } from 'react-bootstrap';\nimport questions from '../questions.json';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as functions from '../utility/utilityFunctions';\nimport Response from './Response';\nimport '../App.css';\n\ninterface AnswerOptionProps {\n    currentQuestion : number;\n}\n\nconst AnswerOption : React.FunctionComponent<AnswerOptionProps> = (props: AnswerOptionProps) => {\n    const answerType : string = questions[props.currentQuestion - 1].type;\n    const options : string[] = questions[props.currentQuestion - 1].incorrect_answers;\n    const [answerSelected, answerChosen] = useState(false);\n    const [response, responseCaptured] = useState(false);\n    // let answerSelected: boolean | null = false;\n    // let response: boolean | null = false;\n    const checkAnswer: (optionChoosen: string) => void = (optionChoosen: string) => {\n        // answerSelected = true;\n        if(optionChoosen == questions[props.currentQuestion - 1].correct_answer) {\n            console.log(\"answer true\");\n            answerChosen(true);\n            // response = true;\n        }\n        else {\n            console.log(\"answer false\");\n            answerChosen(false);\n            // response = false;\n        }\n        responseCaptured(true);\n    }\n    options.push(questions[props.currentQuestion - 1].correct_answer);\n    functions.shuffleArray(options);\n    switch (answerType) {\n        case 'multiple' : \n            return (\n                <div>\n                    <Row className = 'Option-row'>\n                        <Col className = 'Options'>\n                            <Button variant=\"primary\" size=\"lg\" active onClick = {checkAnswer.bind(this,decodeURIComponent(options[0]))}>\n                                {decodeURIComponent(options[0])}\n                            </Button>\n                        </Col>\n                        <Col className = 'Options'>\n                            <Button variant=\"primary\" size=\"lg\" active onClick = {checkAnswer.bind(this,decodeURIComponent(options[1]))}>\n                                {decodeURIComponent(options[1])}\n                            </Button>\n                        </Col>\n                    </Row>\n                    <Row className = 'Option-row'>\n                        <Col className = 'Options'>\n                            <Button variant=\"primary\" size=\"lg\" active onClick = {checkAnswer.bind(this,decodeURIComponent(options[2]))}>\n                                {decodeURIComponent(options[2])}\n                            </Button>\n                        </Col>\n                        <Col className = 'Options'>\n                            <Button variant=\"primary\" size=\"lg\" active onClick = {checkAnswer.bind(this,decodeURIComponent(options[3]))}>\n                                {decodeURIComponent(options[3])}\n                            </Button>\n                        </Col>\n                    </Row>\n                    <Row className = 'Option-row'>\n                        <Response visible = {answerSelected} response = {response} />\n                    </Row>\n                </div>\n            )\n        break;\n        case 'boolean' :\n            return (\n                <div>\n                    <Row className = 'Option-row'>\n                        <Col className = 'Options'>\n                            <Button variant=\"primary\" size=\"lg\" active onClick = {checkAnswer.bind(this,decodeURIComponent(options[0]))}>\n                                {decodeURIComponent(options[0])}\n                            </Button>\n                        </Col>\n                        <Col className = 'Options'>\n                            <Button variant=\"primary\" size=\"lg\" active onClick = {checkAnswer.bind(this,decodeURIComponent(options[1]))}>\n                                {decodeURIComponent(options[1])}\n                            </Button>\n                        </Col>\n                    </Row>\n                    <Row className = 'Option-row'>\n                        <Response visible = {answerSelected} response = {response}/>\n                    </Row>\n                </div>\n            )\n        break;\n        default : \n            return (\n                <div />\n            )\n        break;\n    }\n}\n\nexport default AnswerOption;\n"]},"metadata":{},"sourceType":"module"}